bands
=====
└ bands/
  ├ ai.py                   → AI(): instantiate an openai object that will get
  │                           passed down to all Server()s.
  ├ cli.py                  → CLI(): take in a YAML, get it parsed, create an
  │                           AI()<-OpenAIConfig() + Server()s<-ServerConfig()s,
  │                           pass every Server() the AI(), spawn a Thread() for
  │                           every Server()
  ├ colors.py               → ANSI and MIRC escapes for colors and formatting.
  ├ config.py               → ConfigYAML(): parse YAML, generate OpenAIConfig()
  │                           and ServerConfig()
  ├ irc/
  │ ├ channel/
  │ │ ├ channel.py          → Channel(): instantiated for every channel joined,
  │ │ │                       stores the character limit and allows cmd's to
  │ │ │                       have access to Server() resources.
  │ │ ├ cmd/
  │ │ │ ├ advice.py         → Advice(): provides the user, and if specified, the
  │ │ │ │                     target, with pre-set advices, mostly to motivate the
  │ │ │ │                     target in regard to moving.
  │ │ │ ├ finance.py        → Finance(): finance API scraper, scraping TCMB,
  │ │ │ │                     Yahoo, XE, Forbes and Binance for forex rates and
  │ │ │ │                     World Government Bonds for CDS.
  │ │ │ ├ help.py           → Help(): channel specific command help prompt.
  │ │ │ ├ piss.py           → Piss(): allow for a funny little humorous joke
  │ │ │ │                     for a fun time between friends.
  │ │ │ └ tarot.py          → Tarot(): verbose tarot deck generator with openai
  │ │ │                       powered reading support.
  │ ├ server.py             → Server(): create a socket, sends in the client
  │ │                         details, enters an infinite loop and handles
  │ │                         channel/user/server events within it.
  │ ├ user/
  │ │ ├ cmd/
  │ │ │ ├ auth.py           → Auth(): set the admin user or Server()
  │ │ │ ├ help.py           → Help(): user specific command help prompt.
  │ │ │ ├ openai_handler.py → OpenAIHandler: allow for manipulating the AI()
  │ │ │ │                     state.
  │ │ │ └ rcon.py           → RCon(): allow for connection state to be queried
  │ │ │                       or manipulated.
  │ │ └ user.py             → User(): instantiated for every user that interacts
  │ │                         with the bot, via either using channel cmd's or by
  │ │                         PRIVMSGing the bot. also holds per-user tarot deck
  │ │                         and question.
  │ └ util.py               → collection of functions shared by irc/ components.
  ├ log.py                  → Custom StreamHandler and Formatter.
  └ static/
      ├ advices.json        → file parsed by Advice().
      └ tarot_desc.json     → file parsed by Tarot().


config.yaml example
-------------------
openai:
    keys_file: /path/to/openai_keys.json

servers:
    - name: example1
      address: irc.example1.com
      port: 6697
      passwd: badactors
      botname: bands
      tls: true
      verify_tls: false
      scroll_speed: 0
      channels:
        - "#goodchannel"
        - "#badchannel"
      secret: verysecret

    - name: example2
      address: irc.example2.com
      port: 6697
      botname: bands
      tls: true
      verify_tls: false
      scroll_speed: 0
      channels:
        - "#goodchannel"
        - "#badchannel"
      secret: verysecret


expected openai keys_file format
--------------------------------
{
  "openai_keys": [
      {
        "key": "sk-"
      },
      {
        "key": "sk-"
      }
    ]
}
